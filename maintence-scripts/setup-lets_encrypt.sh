#!/bin/bash          
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/includes.sh"

# I have no idea how to pass in variables to a bash function, figure that out.
# This will just stub otherwise
function check_host_resolution {
  echoc "Check that"
  echoc $host $YELLOW
  echoc "resolves properly..."
  curl -H $host
  #check that headers are 200, 404, 502 (maybe 500?) everything that's not 'did not resolve'
}

echoc "So I guess we're going to make your server secure with Lets Encrypt (good choice)...\n" $GREEN
 
# Ask the email of the main user

while true
do
  echo -en "First, What is your email address? "
  read email
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # MacOS uses BSD's grep, which doesn't have the -P flag
    if ! echo "$email" | grep -qiE "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$" ;then
      echoc "Sorry, I can't seem to parse your email becuase it's not a valid email address. Please try again." $RED
    else
      break
    fi
  else
    if ! echo "$email" | grep -qiP "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$" ;then
      echo "Sorry, I can't seem to parse your email becuase it's not a valid email address. Please try again." $RED
    else
      break
    fi
  fi
done
 
# Ask the name of the site

echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE
echo "Next we're going to create the SSL certificates that will encrypt your server data."
echo "This requires that your host name resolves to this server."
echo "Please see the README.md if you need more info or you're not sure what that means.\n"
echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE

while true
do
  echo -en "What is the host name for this installation (e.g. testapp.pushapp.press)? "
  read host
  if [[ "$OSTYPE" == "darwin"* ]]; then
    if ! echo "$host" | egrep -qiE "^[A-z0-9]*[\.]*[A-z0-9]+[\.][A-z]{2,}$" ;then
      echo "Sorry, I can't seem to parse your url because it's not a valid URL format. Please try again." $RED
    else
      break
    fi
  else
    if ! echo "$host" | grep -qiP "^[A-z0-9]*[\.]*[A-z0-9]+[\.][A-z]{2,}$" ;then
      echoc "Sorry, I can't seem to parse your url because it's not a valid URL format. Please try again." $RED
    else
      break
    fi
  fi
done

# Write the .env file for the LetsEncrypt variables
# This overwrites the current file

# If there's no .env, create it.

if basename "$PWD" | grep 'maintence-scripts' > /dev/null; then
  path='../.env'
else
  path='./.env'
fi

if [ ! -f $path ]; then
  echoc "No .env file found, creating it." $YELLOW
else
  echoc "Removing current .env file" $YELLOW
  rm $path
fi

touch $path

# Write the .env file
echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE
echoc "Creating .env file for $email and $host" $GREEN
echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE

cat <<EOT >> $path
###########################################################################################
# Environmental variables for LetsEncrypt and Push
#
# This file is automatically generated and is overwritten by maintence-scripts/setup.sh
# Since that script will only usually be automatically written to once feel free to edit.
###########################################################################################

LETSENCRYPT_EMAIL=$email
LETSENCRYPT_DOMAINS=$host
LETSENCRYPT_STAGING=
RAILS_ENV=production
EOT

# Stop any possible docker-compose containers that might be sticking around
kill_docker_containers

# Create the proper ssl certs
echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE
echoc "Creating SSL certificates" $GREEN
echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE

if basename "$PWD" | grep 'maintence-scripts' > /dev/null; then
  command='docker-compose -f ../letsencrypt-docker-compose.yml letsencrypt up'
else
  command='docker-compose -f letsencrypt-docker-compose.yml letsencrypt up'
fi

error=$($command | tee /dev/tty | grep 'The following errors were reported by the server')


if ! [[ -z "${error// }" ]]; then
  echoc "\n-------------------------------------------------------------------------------------------------------------" $RED
  echoc "There was an error in generating your certificates.\n" $RED
  echoc "Please review the console output and submit a bug report if you think it's necessary."
  echoc "\n-------------------------------------------------------------------------------------------------------------" $RED
  exit 100
else
  echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE
  echoc "Successfully generated your SSL keys!" $LIGHT_BLUE
  echoc "\n-------------------------------------------------------------------------------------------------------------\n\n" $LIGHT_BLUE
fi

# Stop any possible docker-compose containers that might be sticking around
kill_docker_containers

# Migrate the database (does nothing if database already exists)
echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE
echoc "Migrating the Push app database" $LIGHT_BLUE
echoc "\n-------------------------------------------------------------------------------------------------------------\n\n" $LIGHT_BLUE

docker-compose run web rake db:create
docker-compose run web rake db:migrate
docker-compose run web rake db:seed

# Generate the dhparam file, this happens when we bring up the nginx container
docker-compose -f letsencrypt-docker-compose.yml run -e NGINX_BOOT=false nginx


echoc "\n-------------------------------------------------------------------------------------------------------------\n" $LIGHT_BLUE
echoc "Everything should be set up properly now."
echoc "Try running"
echoc "docker-compose up" $YELLOW
echoc "to make sure it works"
echoc "\n-------------------------------------------------------------------------------------------------------------\n\n" $LIGHT_BLUE

